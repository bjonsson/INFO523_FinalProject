# Following along to this tutorial by Cristi Vlad:
# https://www.youtube.com/watch?v=1FbBaIU8u5A&list=PLonlF40eS6nzc7TqDshRo7k-mTM1Tu_j4&index=3

# This program detects malware based on the file's PE headers. PE files can only be safely examined on an
# isolated machine, like a virtual machine.

import pandas as pd

# The first 41,323 files/rows are legitimate, whereas the next 96,724 files/rows are from virusshare.com.
malData = pd.read_csv("MalwareData.csv", sep= "|")

# We're dropping the "legitimate" column because we want our machine to detect this.
legit = malData[0:41323].drop(["legitimate"], axis=1)  # Axis 1 refers to columns. 0 refers to rows.
mal = malData[41323::].drop(["legitimate"], axis=1)

print("The shape of the legit dataset is: %s samples, %s features"%(legit.shape[0],legit.shape[1]))
print("The shape of the malware dataset is: %s samples, %s features"%(mal.shape[0], mal.shape[1]))

# These are all the variables before dropping the "legitimate" column
print(malData.columns)

# Our first machine learning classifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.cross_validation import train_test_split
from sklearn import cross_validation
                                    # Cross validation is mentioned as one of the newer improvements on
                                    # data mining techniques for cybersecurity on p. 49 of
                                    # "Data Mining and Machine Learning for Cybersecurity" by Du and Dua.


data_in = malData.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = malData['legitimate'].values
extratrees = ExtraTreesClassifier().fit(data_in, labels)
select = SelectFromModel(extratrees, prefit=True)
data_in_new = select.transform(data_in)
print(data_in.shape, data_in_new.shape)

import numpy as np
features = data_in_new.shape[1] # features = variables = columns
importances = extratrees.feature_importances_
indices = np.argsort(importances)[::-1] # Sorts the variables in terms of importance

# Prints the variables in descending order of importance. +2 because we eventually remove the first two columns
for f in range(features):
    print("%d"%(f+1), malData.columns[2+indices[f]],importances[indices[f]])

# Training the RandomForestClassifier
from sklearn.ensemble import RandomForestClassifier
legit_train, legit_test, mal_train, mal_test = cross_validation.train_test_split(data_in_new, labels, test_size=0.2)
classif = RandomForestClassifier(n_estimators=50)

classif.fit(legit_train, mal_train)

print("The percentage of accuracy of the algorithm: ", classif.score(legit_test, mal_test)*100)